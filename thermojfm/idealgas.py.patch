# Patch generated by Pyment v0.3.3

--- a/idealgas.py
+++ b/idealgas.py
@@ -17,6 +17,7 @@
 
 
 class Properties:
+    """ """
     def __init__(self, fluid, unit_system="SI_C", verbose=False):
         self.verbose = verbose
         self.unit_system = unit_system
@@ -30,6 +31,13 @@
         
 
     def _to_quantity(self, pm_symb, pm_result, pm_result_type):
+        """
+
+        :param pm_symb: 
+        :param pm_result: 
+        :param pm_result_type: 
+
+        """
         try:
             pm_result = pm_result[0]
         except Exception as e:
@@ -40,6 +48,15 @@
         return Q_(pm_result, result_units).to(preferred_units)
 
     def _get_p_from_others(self, T=None, d=None, v=None, s=None, **kwargs):
+        """
+
+        :param T:  (Default value = None)
+        :param d:  (Default value = None)
+        :param v:  (Default value = None)
+        :param s:  (Default value = None)
+        :param **kwargs: 
+
+        """
         if (d or v) and T:
             if v:
                 d = 1 / v.to("m^3/kg")
@@ -69,6 +86,16 @@
         return p
 
     def _get_T_from_others(self, p=None, d=None, v=None, h=None, s=None, **kwargs):
+        """
+
+        :param p:  (Default value = None)
+        :param d:  (Default value = None)
+        :param v:  (Default value = None)
+        :param h:  (Default value = None)
+        :param s:  (Default value = None)
+        :param **kwargs: 
+
+        """
         if h is not None:
             T = self._pm.T_h(h=h.to("kJ/kg").magnitude)[0]
         elif (d or v) and p:
@@ -101,7 +128,12 @@
         return T
 
     def _invTp_sd(self, s=None, d=None):
-        """Inverse temperature from entropy and density"""
+        """Inverse temperature from entropy and density
+
+        :param s:  (Default value = None)
+        :param d:  (Default value = None)
+
+        """
         # Generic iteration parameters
         N = 100  # Maximum iterations
         small = 1e-8  # A "small" number
@@ -110,6 +142,11 @@
         scale_factor = 0.01 * d * 8.31446261815324 / self._pm.mw()
 
         def p_from_T(T):
+            """
+
+            :param T: 
+
+            """
             return scale_factor * T
 
         Tmin, Tmax = self._pm.Tlim()
@@ -173,20 +210,41 @@
     #         return it.operands[0]
 
     def _p_s(self, s, T=None):
-        """Pressure as a function of entropy: This is an overload of the PYroMat implementation to enable this functionality for mixtures"""
+        """Pressure as a function of entropy: This is an overload of the PYroMat implementation to enable this functionality for mixtures
+
+        :param s: 
+        :param T:  (Default value = None)
+
+        """
         def_p = pm.config["def_p"]
         s0 = self._pm.s(T=T, p=def_p)
         return def_p * np.exp((s0 - s) / self.R().to("kJ/kg/K").magnitude)
 
     def T(self, **kwargs):
+        """
+
+        :param **kwargs: 
+
+        """
         pm_result = self._get_T_from_others(**kwargs)
         return self._to_quantity("T", pm_result, "temperature")
 
     def p(self, **kwargs):
+        """
+
+        :param **kwargs: 
+
+        """
         pm_result = self._get_p_from_others(**kwargs)
         return self._to_quantity("p", pm_result, "pressure")
 
     def Cp(self, T=None, **kwargs):
+        """
+
+        :param T:  (Default value = None)
+        :param **kwargs: 
+
+        """
         if T is None:
             T = self._get_T_from_others(**kwargs)
         else:
@@ -195,6 +253,12 @@
         return self._to_quantity("Cp", pm_result, "specific heat")
 
     def Cv(self, T=None, **kwargs):
+        """
+
+        :param T:  (Default value = None)
+        :param **kwargs: 
+
+        """
         if T is None:
             T_pm = self._get_T_from_others(**kwargs)
         else:
@@ -203,6 +267,12 @@
         return self._to_quantity("Cv", pm_result, "specific heat")
 
     def k(self, T=None, **kwargs):
+        """
+
+        :param T:  (Default value = None)
+        :param **kwargs: 
+
+        """
         if T is None:
             T_pm = self._get_T_from_others(**kwargs)
         else:
@@ -211,6 +281,13 @@
         return self._to_quantity("k", pm_result, "dimensionless")
 
     def d(self, T=None, p=None, **kwargs):
+        """
+
+        :param T:  (Default value = None)
+        :param p:  (Default value = None)
+        :param **kwargs: 
+
+        """
         if T is None:
             T_pm = self._get_T_from_others(p=p, **kwargs)
         else:
@@ -223,10 +300,21 @@
         return self._to_quantity("d", pm_result, "density")
 
     def v(self, **kwargs):
+        """
+
+        :param **kwargs: 
+
+        """
         d = self.d(**kwargs)
         return 1 / d
 
     def u(self, T=None, **kwargs):
+        """
+
+        :param T:  (Default value = None)
+        :param **kwargs: 
+
+        """
         if T is None:
             T_pm = self._get_T_from_others(**kwargs)
         else:
@@ -235,6 +323,12 @@
         return self._to_quantity("e", pm_result, "specific energy")
 
     def h(self, T=None, **kwargs):
+        """
+
+        :param T:  (Default value = None)
+        :param **kwargs: 
+
+        """
         if T is None:
             T_pm = self._get_T_from_others(**kwargs)
         else:
@@ -243,6 +337,13 @@
         return self._to_quantity("h", pm_result, "specific energy")
 
     def s(self, T=None, p=None, **kwargs):
+        """
+
+        :param T:  (Default value = None)
+        :param p:  (Default value = None)
+        :param **kwargs: 
+
+        """
         if T is None:
             T_pm = self._get_T_from_others(p=p, **kwargs)
         else:
@@ -255,6 +356,12 @@
         return self._to_quantity("s", pm_result, "specific entropy")
 
     def R(self, *args, **kwargs):
+        """
+
+        :param *args: 
+        :param **kwargs: 
+
+        """
         try:
             pm_result = self._pm.R()
         except Exception as e:
@@ -265,11 +372,18 @@
         return self._to_quantity("R", pm_result, "specific heat")
 
     def mw(self, *args, **kwargs):
+        """
+
+        :param *args: 
+        :param **kwargs: 
+
+        """
         pm_result = self._pm.mw()
         return self._to_quantity("mw", pm_result, "molar mass")
 
 
 class IdealGasPropertyPlot:
+    """ """
     def __init__(
         self,
         x=None,
@@ -310,6 +424,19 @@
         offset=10,
         **kwargs,
     ):
+        """
+
+        :param x: 
+        :param y: 
+        :param *args: 
+        :param marker:  (Default value = "o")
+        :param color:  (Default value = "black")
+        :param label:  (Default value = None)
+        :param label_loc:  (Default value = "north")
+        :param offset:  (Default value = 10)
+        :param **kwargs: 
+
+        """
         x = x.to(self.x_units).magnitude
         y = y.to(self.y_units).magnitude
         self.ax.plot(x, y, *args, marker=marker, color=color, **kwargs)
@@ -338,6 +465,13 @@
         )  # horizontal alignment can be left, right or center
 
     def plot_state(self, state_dict, *args, **kwargs):
+        """
+
+        :param state_dict: 
+        :param *args: 
+        :param **kwargs: 
+
+        """
         x = state_dict[self.x_symb]
         y = state_dict[self.y_symb]
         if "label" not in kwargs.keys():
@@ -355,6 +489,18 @@
         n_points=500,
         **kwargs,
     ):
+        """
+
+        :param iso_symb:  (Default value = None)
+        :param iso_value:  (Default value = None)
+        :param x_range:  (Default value = None)
+        :param y_range:  (Default value = None)
+        :param alt_symb:  (Default value = None)
+        :param alt_range:  (Default value = None)
+        :param n_points:  (Default value = 500)
+        :param **kwargs: 
+
+        """
         if x_range is not None:
             if len(x_range) == 2:
                 x1 = x_range[0].to(self.x_units).magnitude
@@ -430,12 +576,28 @@
         arrow=False,
         **kwargs,
     ):
+        """
+
+        :param begin_state:  (Default value = None)
+        :param end_state:  (Default value = None)
+        :param path:  (Default value = None)
+        :param iso_symb:  (Default value = None)
+        :param color:  (Default value = "black")
+        :param arrow:  (Default value = False)
+        :param **kwargs: 
+
+        """
         x1 = begin_state[self.x_symb]
         x2 = end_state[self.x_symb]
         y1 = begin_state[self.y_symb]
         y2 = end_state[self.y_symb]
 
         def plot_straight_line(**kwargs):
+            """
+
+            :param **kwargs: 
+
+            """
             return self.ax.plot(
                 [x1.to(self.x_units).magnitude, x2.to(self.x_units).magnitude],
                 [y1.to(self.y_units).magnitude, y2.to(self.y_units).magnitude],
